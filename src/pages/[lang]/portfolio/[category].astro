---
import type { locale } from "../../../assets/types/i18n";
import { companyData } from "../../../common/companyData";
import { portfolioCategories } from "../../../common/portfolio";
import Link from "../../../components/common/Link.astro";
import PageTitle from "../../../components/common/PageTitle.astro";
import FullSizeImageDialog from "../../../components/features/portfolio/FullSizeImageDialog.astro";
import PortfolioCard from "../../../components/features/portfolio/PortfolioCard.astro";
import Layout from "../../../layouts/Layout.astro";
import { portfolioTranslations } from "../../../translations/portfolio";

export async function getStaticPaths() {
  const categoriesBg = portfolioCategories.map((category) => ({
    params: { lang: "bg" as locale, category: category.category },
    props: { category },
  }));

  const categoriesEn = portfolioCategories.map((category) => ({
    params: { lang: "en" as locale, category: category.category },
    props: { category },
  }));

  return [...categoriesBg, ...categoriesEn];
}

const { lang } = Astro.params;
const { category } = Astro.props;
const data = category[lang];
const translations = portfolioTranslations[lang];

const companyName = companyData[lang].name;
---

<Layout
  title={`${data.name} | ${companyName}`}
  metaDescription=""
  language={lang}
>
  <section class="flex flex-col gap-8">
    <PageTitle>{data.name}</PageTitle>
    <ul
      class="grid gap-8 grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 mx-auto"
    >
      {
        category.images.map((image) => (
          <PortfolioCard item={image} language={lang} />
        ))
      }
    </ul>
    <Link href={`/${lang}/portfolio`} className="text-link-blue w-max mx-auto">{translations.backToIndex}</Link>
  </section>
</Layout>

{
  category.images.map((image) => (
    <FullSizeImageDialog
      imageFileName={image.imageFileName}
      caption={image[lang].caption}
      closeLabel={translations.close}
    />
  ))
}

<script>
import { openDialog } from "../../../util/openDialog";
  const buttons = document.querySelectorAll(
    "[data-image]"
  ) as NodeListOf<HTMLButtonElement>;
  for (const button of buttons) {
    button.addEventListener("click", (event) => {
      event.preventDefault();
      const image = button.dataset.image;
      if (image) {
        const dialog = document.getElementById(
          image
        ) as HTMLDialogElement | null;
        
        if (dialog) {
          openDialog(dialog);
        }
      }
    });
  }
</script>
